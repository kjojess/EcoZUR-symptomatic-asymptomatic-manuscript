VFDB_rowsums<-VFDB_tab_trans %>%
mutate_if(is.numeric, ~1 * (. !=0)) %>%
t()%>%
as.data.frame()%>%
rownames_to_column(var="metagenome_read_file_name")%>%
merge(meta, "metagenome_read_file_name")%>%
dplyr::relocate(sample_name, .after =metagenome_read_file_name)%>%
column_to_rownames("sample_name")%>%
mutate(total = rowSums(select_if(., is.numeric), na.rm = TRUE))
VFDB_rowsums_inf_case<-subset(VFDB_rowsums, Infection=="Infected" & Diarrhea=="Case")
VFDB_rowsums_inf_control<-subset(VFDB_rowsums, Infection=="Infected" & Diarrhea=="Control")
VFDB_rowsums_uninf_case<-subset(VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Case")
VFDB_rowsums_uninf_control<-subset(VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Control")
#nonparametric pairwise tests
wilcox.test(VFDB_rowsums_inf_case$total, VFDB_rowsums_inf_control$total)
wilcox.test(VFDB_rowsums_uninf_case$total, VFDB_rowsums_uninf_control$total)
#plots of total virulence genes by DEC infection and diarrhea status
#plot
VFDB_box<-VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
guides(fill=guide_legend(nrow=2), byrow=TRUE)+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.title=element_blank(), panel.border=element_rect(color="black", fill=NA, size=0.5), legend.position="bottom", axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.text=element_text(size=12), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12))
VFDB_box
#format data
Ec_VFDB_rowsums<-VFDB_tab_trans %>%
mutate_if(is.numeric, ~1 * (. !=0)) %>%
t()%>%
as.data.frame()%>%
select(contains("Escherichia"))%>%
rownames_to_column(var="metagenome_read_file_name")%>%
merge(meta, "metagenome_read_file_name")%>%
dplyr::relocate(sample_name, .after =metagenome_read_file_name)%>%
column_to_rownames("sample_name")%>%
mutate(total = rowSums(select_if(., is.numeric), na.rm = TRUE))
Ec_VFDB_rowsums_inf_case<-subset(Ec_VFDB_rowsums, Infection=="Infected" & Diarrhea=="Case")
Ec_VFDB_rowsums_inf_control<-subset(Ec_VFDB_rowsums, Infection=="Infected" & Diarrhea=="Control")
Ec_VFDB_rowsums_uninf_case<-subset(Ec_VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Case")
Ec_VFDB_rowsums_uninf_control<-subset(Ec_VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Control")
#nonparametric pairwise tests
wilcox.test(Ec_VFDB_rowsums_inf_case$total, Ec_VFDB_rowsums_inf_control$total)
wilcox.test(Ec_VFDB_rowsums_uninf_case$total, Ec_VFDB_rowsums_uninf_control$total)
#plot
EC_VFDB_box<-Ec_VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
guides(fill=guide_legend(nrow=2), byrow=TRUE)+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.title=element_blank(), panel.border=element_rect(color="black", fill=NA, size=0.5), legend.position="bottom", axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.text=element_text(size=12), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12))
EC_VFDB_box
#format data
Kleb_VFDB_rowsums<-VFDB_tab_trans %>%
mutate_if(is.numeric, ~1 * (. !=0)) %>%
t()%>%
as.data.frame()%>%
select(contains("Klebsiella"))%>%
rownames_to_column(var="metagenome_read_file_name")%>%
merge(meta, "metagenome_read_file_name")%>%
dplyr::relocate(sample_name, .after =metagenome_read_file_name)%>%
column_to_rownames("sample_name")%>%
mutate(total = rowSums(select_if(., is.numeric), na.rm = TRUE))
Kleb_VFDB_rowsums_inf_case<-subset(Kleb_VFDB_rowsums, Infection=="Infected" & Diarrhea=="Case")
Kleb_VFDB_rowsums_inf_control<-subset(Kleb_VFDB_rowsums, Infection=="Infected" & Diarrhea=="Control")
Kleb_VFDB_rowsums_uninf_case<-subset(Kleb_VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Case")
Kleb_VFDB_rowsums_uninf_control<-subset(Kleb_VFDB_rowsums, Infection=="Uninfected" & Diarrhea=="Control")
#nonparametric pairwise tests
wilcox.test(Kleb_VFDB_rowsums_inf_case$total, VFDB_rowsums_inf_control$total)
wilcox.test(Kleb_VFDB_rowsums_uninf_case$total, VFDB_rowsums_uninf_control$total)
#plot
Kleb_VFDB_box<-Kleb_VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
guides(fill=guide_legend(nrow=2), byrow=TRUE)+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.title=element_blank(), panel.border=element_rect(color="black", fill=NA, size=0.5), legend.position="bottom", axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.text=element_text(size=12), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12))
Kleb_VFDB_box
#boxplot
VFDB_box2<-VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
ggtitle("Total virulence genes (any taxa)")+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), , panel.border=element_rect(color="black", fill=NA, size=0.5), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12), legend.position="none")
VFDB_box2
#boxplot w only E. coli-annotated genes
EC_VFDB_box2<-Ec_VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
guides(fill=guide_legend(nrow=2), byrow=TRUE)+
ggtitle(expression(paste(italic("E. coli"),"-annotated virulence genes")))+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.title=element_blank(), panel.border=element_rect(color="black", fill=NA, size=0.5), legend.position="bottom", axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.text=element_text(size=12), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12))
EC_VFDB_box2
box2<-plot_grid(VFDB_box2, EC_VFDB_box2, ncol=1, rel_heights=c(1,1.4), labels=c("A", "B"))
box2
View(KW_sig_genes)
Shig<-KW_sig_genes %>%
select(contains("Klebsiella"))%>%
Shig<-KW_sig_genes %>%
select(contains("Klebsiella"))
View(Shig)
Shig<-KW_sig_genes %>%
rownames_to_column()%>%
select(contains("Klebsiella"))
write.csv(KW_sig_genes, file="KW_sig_genes.csv")
#boxplot
VFDB_box2<-VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
ggtitle("Total virulence genes (any taxa)")+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), , panel.border=element_rect(color="black", fill=NA, size=0.5), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12), legend.position="none")
VFDB_box2
#boxplot w only E. coli-annotated genes
EC_VFDB_box2<-Ec_VFDB_rowsums %>%
tibble::rownames_to_column("Sample_ID") %>%
ggplot(aes(fill=Infection_diarrhea, y=total, x=Infection))+
geom_boxplot()+
scale_fill_manual(values=c("Infected_Case"="coral2", "Infected_Control"="steelblue3", "Uninfected_Case"="darkgoldenrod2", "Uninfected_Control"="darkolivegreen4"), labels=c("Symptomatic DEC infections", "Asymptomatic DEC infections", "Uninfected cases", "Uninfected controls"))+
ylab("Number of genes")+
xlab(NULL)+
stat_compare_means(method="wilcox.test", label.x=0.8, size=3.5)+
guides(fill=guide_legend(nrow=2), byrow=TRUE)+
ggtitle(expression(paste(italic("E. coli"),"-annotated virulence genes")))+
theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.title=element_blank(), panel.border=element_rect(color="black", fill=NA, size=0.5), legend.position="bottom", axis.text.x=element_blank(), axis.ticks.x=element_blank(), legend.text=element_text(size=12), axis.text.y=element_text(size=10), axis.title.y=element_text(size=12))
EC_VFDB_box2
box2<-plot_grid(VFDB_box2, EC_VFDB_box2, ncol=1, rel_heights=c(1,1.4), labels=c("A", "B"))
box2
View(VFDB_rowsums)
View(VFDB_rowsums_inf_case)
View(VFDB_rowsums_inf_control)
View(VFDB_rowsums_uninf_case)
View(VFDB_rowsums_uninf_control)
colSums(VFDB_rowsums_inf_case)/26
colSums(Filter(is.numeric, VFDB_rowsums_inf_case))/26
colSums(Filter(is.numeric, VFDB_rowsums_inf_control))/26
colSums(Filter(is.numeric, VFDB_rowsums_inf_control))/25
colSums(Filter(is.numeric, VFDB_rowsums_uninf_case))/30
colSums(Filter(is.numeric, VFDB_rowsums_uninf_control))/30
colSums(Filter(is.numeric, VFDB_rowsums_uninf_case))/22
setwd("~/Github/EcoZUR-symptomatic-asymptomatic-manuscript/Functional genes")
#rel. abundance ORF matrix (already transformed by MicrobeCensus genome equivalents)
ORF_trans<-read.csv(file="matrix_all_MG_ORFs_cov_transformed.csv", header=TRUE, row.names=1)
#metadata
meta<-read.table(file="all_MG_ORFs_metadata v2.tab.txt", sep='\t', header=TRUE)%>%
rename("sampleID"="file_name")
#metadata
meta<-read.table(file="all_MG_ORFs_metadata v2.txt", sep='\t', header=TRUE)%>%
rename("sampleID"="file_name")
library(tidyverse)
library(tibble)
library(dplyr)
library(data.table)
library(reshape2)
library(kableExtra)
library(KEGGREST)
library(vegan)
library(ComplexHeatmap)
library(ggplot2)
library(circlize)
#protein identifiers
ids<-read.delim(file="03.Identifier_Correspondence.txt", sep='\t', header =FALSE, quote="", fill=TRUE)
#protein identifiers
ids<-read.delim(file="03.Identifier_Correspondence.txt", sep='\t', header =FALSE, quote="", fill=TRUE)
#metadata
meta<-read.table(file="all_MG_ORFs_metadata v2.txt", sep='\t', header=TRUE)%>%
rename("sampleID"="file_name")
meta_Inf_Case<-subset(meta, Infection_diarrhea=="Infected_Case")
meta_Inf_Control<-subset(meta, Infection_diarrhea=="Infected_Control")
meta_Uninf_Case<-subset(meta, Infection_diarrhea=="Uninfected_Case")
meta_Uninf_Control<-subset(meta, Infection_diarrhea=="Uninfected_Control")
ORF_trans<-ORF_trans%>%
select(-c("MG_17_prodigal_MG_contigs_blastn", "MG_4_prodigal_MG_contigs_blastn", "MG_50_prodigal_MG_contigs_blastn", "MG_53_prodigal_MG_contigs_blastn", "MG_54_prodigal_MG_contigs_blastn", "MG_56_prodigal_MG_contigs_blastn", "MG_7_prodigal_MG_contigs_blastn", "MG_8_prodigal_MG_contigs_blastn", "MG_9_prodigal_MG_contigs_blastn"))
#read in ko mapping files
pathway_list <- read_tsv("path_list.txt")
rm(list = ls())
library(tidyverse)
library(tibble)
library(dplyr)
library(data.table)
library(reshape2)
library(kableExtra)
library(KEGGREST)
library(vegan)
library(ComplexHeatmap)
library(ggplot2)
library(circlize)
#MicrobeAnnotator output
annot<-read.delim(file="annotations_joined.tsv", sep='\t', header=TRUE, quote="", fill=TRUE)
#protein identifiers
ids<-read.delim(file="03.Identifier_Correspondence.txt", sep='\t', header =FALSE, quote="", fill=TRUE)
#rm(list = ls())
library(Nonpareil)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ggthemr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(qiime2R)
library(tibble)
library(data.table)
library(ggsci)
library(iNEXT)
library(phyloseq)
library(ggpubr)
library(metagMisc)
library(ggplot2)
library(microViz)
ggthemr('fresh')
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"rooted_tree_masked_aligned_rep_set_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
#rm(list = ls())
library(Nonpareil)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ggthemr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(qiime2R)
library(tibble)
library(data.table)
library(ggsci)
library(iNEXT)
library(phyloseq)
library(ggpubr)
library(metagMisc)
library(ggplot2)
library(microViz)
ggthemr('fresh')
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"rooted_tree_masked_aligned_rep_set_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
#rm(list = ls())
library(Nonpareil)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ggthemr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(qiime2R)
library(tibble)
library(data.table)
library(ggsci)
library(iNEXT)
library(phyloseq)
library(ggpubr)
library(metagMisc)
library(ggplot2)
library(microViz)
ggthemr('fresh')
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"rooted_tree_masked_aligned_rep_set_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
#remove taxa where phylum is ambiguous (these are likely artifacts)
phy <- subset_taxa(phy, !is.na(Phylum) & !Phylum %in% c("", "uncharacterized"))
#remove chloroplast and mitochondrial sequences
phy<-subset_taxa(phy, (Class!="Cloroplast") | is.na(Class))
phy<-subset_taxa(phy, (Family!="mitochondria") | is.na(Class))
#remove rotavirus-positive samples
phy<- subset_samples(phy, rota!="1")
#remove samples where isolate genome was contaminated
phy<-subset_samples(phy, contaminated!="1")
#remove E. coli
phy_Ec_removed<-subset_taxa(phy, (Species!="coli") | is.na(Class))
#add diarrhea and infection status metadata to phyloseq object
meta<-read.csv(file = "16S_metadata_DEC_diarrhea.csv")
phy<-ps_join(x = phy, y = meta, type = "inner", match_sample_names="SampleID")
phy_Ec_removed<-ps_join(x = phy_Ec_removed, y = meta, type = "inner", match_sample_names="SampleID")
#with E. coli
#subset samples based on DEC infection status
phy_Inf<-subset_samples(phy, (DEC_infection=="Infected"))
phy_Uninf<-subset_samples(phy, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Inf_case<-subset_samples(phy_Inf, cc=="Case")
phy_Inf_control<-subset_samples(phy_Inf, cc=="Control")
phy_Uninf_case<-subset_samples(phy_Uninf, cc=="Case")
phy_Uninf_control<-subset_samples(phy_Uninf, cc=="Control")
#without E. coli
phy_Ec_removed_Inf<-subset_samples(phy_Ec_removed, (DEC_infection=="Infected"))
phy_Ec_removed_Uninf<-subset_samples(phy_Ec_removed, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Ec_removed_Inf_case<-subset_samples(phy_Ec_removed_Inf, cc=="Case")
phy_Ec_removed_Inf_control<-subset_samples(phy_Ec_removed_Inf, cc=="Control")
phy_Ec_removed_Uninf_case<-subset_samples(phy_Ec_removed_Uninf, cc=="Case")
phy_Ec_removed_Uninf_control<-subset_samples(phy_Ec_removed_Uninf, cc=="Control")
#with  E. coli
#all samples
phy_inext<-prepare_inext(phy)
#by DEC infection status
phy_Inf_inext<-prepare_inext(phy_Inf)
phy_Uninf_inext<-prepare_inext(phy_Uninf)
#by diarrhea and DEC infection status
phy_Inf_case_inext<-prepare_inext(phy_Inf_case)
phy_Inf_control_inext<-prepare_inext(phy_Inf_control)
phy_Uninf_case_inext<-prepare_inext(phy_Uninf_case)
phy_Uninf_control_inext<-prepare_inext(phy_Uninf_control)
#without E. coli
phy_Ec_removed_inext<-prepare_inext(phy_Ec_removed)
#by DEC infection status
phy_Ec_removed_Inf_inext<-prepare_inext(phy_Ec_removed_Inf)
phy_Ec_removed_Uninf_inext<-prepare_inext(phy_Ec_removed_Uninf)
#by diarrhea and DEC infection status
phy_Ec_removed_Inf_case_inext<-prepare_inext(phy_Ec_removed_Inf_case)
phy_Ec_removed_Inf_control_inext<-prepare_inext(phy_Ec_removed_Inf_control)
phy_Ec_removed_Uninf_case_inext<-prepare_inext(phy_Ec_removed_Uninf_case)
phy_Ec_removed_Uninf_control_inext<-prepare_inext(phy_Ec_removed_Uninf_control)
#with E. coli
#all 16S samples
phy_inext_out<-iNEXT(phy_inext, q=0, datatype="abundance")
#by DEC infection status
phy_Inf_inext_out<-iNEXT(phy_Inf_inext, q=0, datatype="abundance")
#rm(list = ls())
library(Nonpareil)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ggthemr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(qiime2R)
library(tibble)
library(data.table)
library(ggsci)
library(iNEXT)
library(phyloseq)
library(ggpubr)
library(metagMisc)
library(ggplot2)
library(microViz)
ggthemr('fresh')
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"rooted_tree_masked_aligned_rep_set_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
#remove taxa where phylum is ambiguous (these are likely artifacts)
phy <- subset_taxa(phy, !is.na(Phylum) & !Phylum %in% c("", "uncharacterized"))
#remove chloroplast and mitochondrial sequences
phy<-subset_taxa(phy, (Class!="Cloroplast") | is.na(Class))
phy<-subset_taxa(phy, (Family!="mitochondria") | is.na(Class))
#remove rotavirus-positive samples
phy<- subset_samples(phy, rota!="1")
#remove samples where isolate genome was contaminated
phy<-subset_samples(phy, contaminated!="1")
#remove E. coli
phy_Ec_removed<-subset_taxa(phy, (Species!="coli") | is.na(Class))
#add diarrhea and infection status metadata to phyloseq object
meta<-read.csv(file = "16S_metadata_DEC_diarrhea.csv")
phy<-ps_join(x = phy, y = meta, type = "inner", match_sample_names="SampleID")
phy_Ec_removed<-ps_join(x = phy_Ec_removed, y = meta, type = "inner", match_sample_names="SampleID")
#with E. coli
#subset samples based on DEC infection status
phy_Inf<-subset_samples(phy, (DEC_infection=="Infected"))
phy_Uninf<-subset_samples(phy, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Inf_case<-subset_samples(phy_Inf, cc=="Case")
phy_Inf_control<-subset_samples(phy_Inf, cc=="Control")
phy_Uninf_case<-subset_samples(phy_Uninf, cc=="Case")
phy_Uninf_control<-subset_samples(phy_Uninf, cc=="Control")
#without E. coli
phy_Ec_removed_Inf<-subset_samples(phy_Ec_removed, (DEC_infection=="Infected"))
phy_Ec_removed_Uninf<-subset_samples(phy_Ec_removed, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Ec_removed_Inf_case<-subset_samples(phy_Ec_removed_Inf, cc=="Case")
phy_Ec_removed_Inf_control<-subset_samples(phy_Ec_removed_Inf, cc=="Control")
phy_Ec_removed_Uninf_case<-subset_samples(phy_Ec_removed_Uninf, cc=="Case")
phy_Ec_removed_Uninf_control<-subset_samples(phy_Ec_removed_Uninf, cc=="Control")
#with  E. coli
#all samples
phy_inext<-prepare_inext(phy)
#by DEC infection status
phy_Inf_inext<-prepare_inext(phy_Inf)
phy_Uninf_inext<-prepare_inext(phy_Uninf)
#by diarrhea and DEC infection status
phy_Inf_case_inext<-prepare_inext(phy_Inf_case)
phy_Inf_control_inext<-prepare_inext(phy_Inf_control)
phy_Uninf_case_inext<-prepare_inext(phy_Uninf_case)
phy_Uninf_control_inext<-prepare_inext(phy_Uninf_control)
#without E. coli
phy_Ec_removed_inext<-prepare_inext(phy_Ec_removed)
#by DEC infection status
phy_Ec_removed_Inf_inext<-prepare_inext(phy_Ec_removed_Inf)
phy_Ec_removed_Uninf_inext<-prepare_inext(phy_Ec_removed_Uninf)
#by diarrhea and DEC infection status
phy_Ec_removed_Inf_case_inext<-prepare_inext(phy_Ec_removed_Inf_case)
phy_Ec_removed_Inf_control_inext<-prepare_inext(phy_Ec_removed_Inf_control)
phy_Ec_removed_Uninf_case_inext<-prepare_inext(phy_Ec_removed_Uninf_case)
phy_Ec_removed_Uninf_control_inext<-prepare_inext(phy_Ec_removed_Uninf_control)
#with E. coli
#all 16S samples
phy_inext_out<-iNEXT(phy_inext, q=0, datatype="abundance")
rm(list = ls())
library(Nonpareil)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ggthemr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(qiime2R)
library(tibble)
library(data.table)
library(ggsci)
library(iNEXT)
library(phyloseq)
library(ggpubr)
library(metagMisc)
library(ggplot2)
library(microViz)
ggthemr('fresh')
phy<-qza_to_phyloseq("table_EcoZUR.qza",
"rooted_tree_masked_aligned_rep_set_EcoZUR.qza",
"taxonomy_EcoZUR.qza",
"EcoZUR_meta_updated_pathotypes.tsv")
#remove taxa where phylum is ambiguous (these are likely artifacts)
phy <- subset_taxa(phy, !is.na(Phylum) & !Phylum %in% c("", "uncharacterized"))
#remove chloroplast and mitochondrial sequences
phy<-subset_taxa(phy, (Class!="Cloroplast") | is.na(Class))
phy<-subset_taxa(phy, (Family!="mitochondria") | is.na(Class))
#remove rotavirus-positive samples
phy<- subset_samples(phy, rota!="1")
#remove samples where isolate genome was contaminated
phy<-subset_samples(phy, contaminated!="1")
#remove E. coli
phy_Ec_removed<-subset_taxa(phy, (Species!="coli") | is.na(Class))
#add diarrhea and infection status metadata to phyloseq object
meta<-read.csv(file = "16S_metadata_DEC_diarrhea.csv")
phy<-ps_join(x = phy, y = meta, type = "inner", match_sample_names="SampleID")
phy_Ec_removed<-ps_join(x = phy_Ec_removed, y = meta, type = "inner", match_sample_names="SampleID")
#with E. coli
#subset samples based on DEC infection status
phy_Inf<-subset_samples(phy, (DEC_infection=="Infected"))
phy_Uninf<-subset_samples(phy, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Inf_case<-subset_samples(phy_Inf, cc=="Case")
phy_Inf_control<-subset_samples(phy_Inf, cc=="Control")
phy_Uninf_case<-subset_samples(phy_Uninf, cc=="Case")
phy_Uninf_control<-subset_samples(phy_Uninf, cc=="Control")
#without E. coli
phy_Ec_removed_Inf<-subset_samples(phy_Ec_removed, (DEC_infection=="Infected"))
phy_Ec_removed_Uninf<-subset_samples(phy_Ec_removed, (DEC_infection=="Uninfected"))
#subset samples based on diarrhea (case/control) and DEC infection status
phy_Ec_removed_Inf_case<-subset_samples(phy_Ec_removed_Inf, cc=="Case")
phy_Ec_removed_Inf_control<-subset_samples(phy_Ec_removed_Inf, cc=="Control")
phy_Ec_removed_Uninf_case<-subset_samples(phy_Ec_removed_Uninf, cc=="Case")
phy_Ec_removed_Uninf_control<-subset_samples(phy_Ec_removed_Uninf, cc=="Control")
#with  E. coli
#all samples
phy_inext<-prepare_inext(phy)
#by DEC infection status
phy_Inf_inext<-prepare_inext(phy_Inf)
phy_Uninf_inext<-prepare_inext(phy_Uninf)
#by diarrhea and DEC infection status
phy_Inf_case_inext<-prepare_inext(phy_Inf_case)
phy_Inf_control_inext<-prepare_inext(phy_Inf_control)
phy_Uninf_case_inext<-prepare_inext(phy_Uninf_case)
phy_Uninf_control_inext<-prepare_inext(phy_Uninf_control)
#without E. coli
phy_Ec_removed_inext<-prepare_inext(phy_Ec_removed)
#by DEC infection status
phy_Ec_removed_Inf_inext<-prepare_inext(phy_Ec_removed_Inf)
phy_Ec_removed_Uninf_inext<-prepare_inext(phy_Ec_removed_Uninf)
#by diarrhea and DEC infection status
phy_Ec_removed_Inf_case_inext<-prepare_inext(phy_Ec_removed_Inf_case)
phy_Ec_removed_Inf_control_inext<-prepare_inext(phy_Ec_removed_Inf_control)
phy_Ec_removed_Uninf_case_inext<-prepare_inext(phy_Ec_removed_Uninf_case)
phy_Ec_removed_Uninf_control_inext<-prepare_inext(phy_Ec_removed_Uninf_control)
#with E. coli
#all 16S samples
phy_inext_out<-iNEXT(phy_inext, q=0, datatype="abundance")
#with E. coli
#by diarrhea and DEC infection status
phy_Inf_case_inext_out<-iNEXT(phy_Inf_case_inext, q=0, datatype="abundance")
